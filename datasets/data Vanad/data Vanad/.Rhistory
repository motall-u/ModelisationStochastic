x<-dlnorm(vect, 399,443.0180583)
d<-density(x)
plot(d)
vect<-c(0:10)
x<-dlnorm(vect, 399,443.0180583)
d<-density(x)
plot(x)
vect<-c(0:100:10)
x<-dlnorm(vect, 399,443.0180583)
d<-density(x)
plot(x)
vect<-c(0:100,10)
x<-dlnorm(vect, 399,443.0180583)
d<-density(x)
plot(x)
vect<-c(0:100)
x<-dlnorm(vect, 399,443.0180583)
d<-density(x)
plot(x)
x
plot(x)
seq(5,100,5)
plot(x)
plot(x,seq(5,100,5))
vect=seq(5,100,5)
dlnorm(vect, 399,443.0180583)
plot(dlnorm(vect, 399,443.0180583))
vect=seq(5,100,5)
x<-dlnorm(vect, 399,443.0180583)
d<-density(x)
plot(x)
vect=seq(0.1,100,0.1)
x<-dlnorm(vect, 399,443.0180583)
d<-density(x)
plot(x)
vect=seq(0.1,100,0.1)
x<-dlnorm(vect, 399,443.0180583)
d<-density(x)
plot(x,vect)
vect=seq(0.1,100,0.1)
x<-dlnorm(vect, 399,443.0180583)
d<-density(x)
plot(vect,x)
help(dlnorm)
# vect=seq(0.1,100,0.1)
# x<-dlnorm(vect, 399,443.0180583)
# d<-density(x)
# plot(vect,x)
r<-rlnorm(10000,399,443.0180583)
mean(r)
sd(r)
# vect=seq(0.1,100,0.1)
# x<-dlnorm(vect, 399,443.0180583)
# d<-density(x)
# plot(vect,x)
r<-rlnorm(1000,399,443.0180583)
mean(r)
sd(r)
# vect=seq(0.1,100,0.1)
# x<-dlnorm(vect, 399,443.0180583)
# d<-density(x)
# plot(vect,x)
r<-rlnorm(1000,log(399),log(443.0180583))
mean(r)
sd(r)
# vect=seq(0.1,100,0.1)
# x<-dlnorm(vect, 399,443.0180583)
# d<-density(x)
# plot(vect,x)
r<-rlnorm(100,log(399),log(443.0180583))
mean(r)
sd(r)
# vect=seq(0.1,100,0.1)
# x<-dlnorm(vect, 399,443.0180583)
# d<-density(x)
# plot(vect,x)
r<-rlnorm(100,399,443.0180583)
mean(r)
sd(r)
# vect=seq(0.1,100,0.1)
# x<-dlnorm(vect, 399,443.0180583)
# d<-density(x)
# plot(vect,x)
r<-rlnorm(100,log(399),l0g(443.0180583))
mean(r)
sd(r)
plot(r)
# vect=seq(0.1,100,0.1)
# x<-dlnorm(vect, 399,443.0180583)
# d<-density(x)
# plot(vect,x)
r<-rlnorm(100,log(399),log(443.0180583))
mean(r)
sd(r)
plot(r)
vect=seq(0.1,100,0.1)
x<-dlnorm(vect, 399,443.0180583)
d<-density(x)
plot(vect,x)
# r<-rlnorm(100,log(399),log(443.0180583))
# mean(r)
# sd(r)
# plot(r)
# sample a normal distribution, with a mean of 5 and sd of 2, 100 times
x <- rnorm(100, mean=5, sd=2)
print(x)
# sample a normal distribution, with a mean of 5 and sd of 2, 100 times
x <-rnorm(100, mean=5, sd=2)
print(x[15])
# sample a normal distribution, with a mean of 5 and sd of 2, 100 times
for(i in 1:10) {
paste("x",i) <-rnorm(100, mean=5, sd=2)
}
print(x1[15])
# sample a normal distribution, with a mean of 5 and sd of 2, 100 times
for(i in 1:10) {
paste("x",i,, sep="") <-rnorm(100, mean=5, sd=2)
}
print(x1[15])
# sample a normal distribution, with a mean of 5 and sd of 2, 100 times
for(i in 1:10) {
paste("x",i,, sep="") <-rnorm(100, mean=5, sd=2)
}
print(x1[15])
# sample a normal distribution, with a mean of 5 and sd of 2, 100 times
for(i in 1:10) {
paste("x","i",, sep="") <-rnorm(100, mean=5, sd=2)
}
print(x1[15])
# sample a normal distribution, with a mean of 5 and sd of 2, 100 times
for(i in 1:10) {
paste("x","i",sep="") <-rnorm(100, mean=5, sd=2)
}
print(x1[15])
# sample a normal distribution, with a mean of 5 and sd of 2, 100 times
for(i in 1:10) {
i <-rnorm(100, mean=5, sd=2)
}
print(x1[15])
# sample a normal distribution, with a mean of 5 and sd of 2, 100 times
for(i in 1:10) {
i <-rnorm(100, mean=5, sd=2)
}
print(i[15])
load("/Users/mamadouthiongane/Desktop/donnees/dataMai2015/test")
b
predict.gam(b,model2)
library(mgcv)
predict.gam(b,model2)
version
install.packages("FAdist")
install.packages("FAdist")
install.packages(c("FAdist", "h2o"))
install.packages(c("FAdist", "h20"))
install.packages(c("FAdist", "h2o"))
install.packages("h2o")
install.packages("FAdist")
install.packages("mgcv")
install.packages("FAdist")
install.packages("FAdist")
install.packages("mgcv")
install.packages("FAdist")
install.packages("FAdist")
install.packages("mgcv")
install.packages("FAdist")
install.packages("mgcv")
install.packages("mgcv")
install.packages("mgcv")
library("fitdistrplus")
data("groundbeef")
str(groundbeef)
dn=density(groundbeef$serving)
plot(dn)
library("fitdistrplus")
data("groundbeef")
str(groundbeef)
dn=density(groundbeef$serving)
plot(dn)
library("fitdistrplus")
data("groundbeef")
str(groundbeef)
dn=density(groundbeef$serving)
plot(dn)
fw <- fitdist(groundbeef$serving, "weibull")
summary(fw)
library("fitdistrplus")
data("groundbeef")
str(groundbeef)
#dn=density(groundbeef$serving)
#plot(dn)
fw <- fitdist(groundbeef$serving, "weibull")
summary(fw)
fg <- fitdist(groundbeef$serving, "gamma")
fln <- fitdist(groundbeef$serving, "lnorm")
par(mfrow = c(2, 2))
plot.legend <- c("Weibull", "lognormal", "gamma")
denscomp(list(fw, fln, fg), legendtext = plot.legend)
cdfcomp(list(fw, fln, fg), legendtext = plot.legend)
qqcomp(list(fw, fln, fg), legendtext = plot.legend)
ppcomp(list(fw, fln, fg), legendtext = plot.legend)
path="/Users/mamadouthiongane/Desktop/Cours-Simulation/Master2SIR-2020-2021//" #chemin du dossier où se trouvent les tables
# l'utilisateur doit mettre toutes ses tables dans le meme dossier et mettre le chemin du dossier ou elles
#sont situées ici
setwd(path)#place le curseur de lecture de fichiers au chemin précédent
dataframe1=read.table("calls-2014-02.csv", sep=",", dec=".", header=TRUE)
df1<-na.omit(dataframe1)
row.names(df1)
print(head(df1))
#
library("fitdistrplus")
#creer deux nouveaux colonnes: l'une contient la date du jour et l'autre contient l'heure
# Les deux infos sont dans la colone 'date_received'
dtimes=as.character(df1$date_received)
dtparts = t(as.data.frame(strsplit(dtimes,' ' )))
row.names(dtparts) = NULL
dtparts=as.data.frame(dtparts)
names(dtparts)<-c('laDate','lHeure')
print(head(dtparts))
#Convertir l'heure en seconde et ajouter cette colonne
timeOnly=as.character(dtparts$lHeure)
lHS=t(as.data.frame(strsplit(timeOnly, ':')))   # exple 19:15:23
row.names(lHS)=NULL
lHS=as.data.frame(lHS)
names(lHS)<-c('HH','MM','SS')
print(head(lHS))
heurArrSecond=as.integer(lHS$HH)*3600+as.integer(lHS$MM)*60+as.integer(lHS$SS)
#
dateArr=dtparts$laDate
heureArr=dtparts$lHeure
#
df1=cbind(df1,dateArr,heureArr,heurArrSecond)
##############################################################################
#Determiner les durées des inter-arrivée pour le type d'appel 30175
# 1- Nous determinons le jeu de données pour le type d'appel 30175
df30175= df1[which(df1$queue_name=='30175'), ]
print(head(df30175))
# 2-Selectionnée les jours distinct du mois de fevrier
#Donc il faut juste determiner les valeurs distinct de la collone
# 'dateArr'
jourFev=unique(df30175$dateArr)
# 3- Nous allons découper ses données jour par jour.
# Pour chaque jour j,  la requete suivante permet de selectionner les données
# ddf=df30175[which(df30175$dateArr==jourFev[j]), ]
#Pour chacune des journées du mois de fevrier nous
# calculons les inter-arrivées  et nous les gardons dans un vecteur
# appelé 'rs'
rs<-c()
for(j in 1:length(jourFev))
{
ddf=df30175[which(df30175$dateArr==jourFev[j]), ]
timeSec=sort(ddf$heurArrSecond)
for(i in 2:length(timeSec)){
a=timeSec[i]-timeSec[i-1]
rs<-c(rs,a)
}
}
print(rs)
rs=rs[rs<150]
rs=rs[rs>0]
dd=density(rs)
plot(dd)
hh=hist(rs)
fw <- fitdist(rs, "weibull")
fg <- fitdist(rs, "gamma")
fln <- fitdist(rs, "lnorm")
fe <- fitdist(rs, "exp")
par(mfrow = c(1, 1))
plot.legend <- c("gamma", "expo","Wei", "logno")
denscomp(list(fg, fe, fw, fln), legendtext = plot.legend)
qqcomp(list(fg, fe, fw, fln), legendtext = plot.legend)
cdfcomp(list(fg, fe, fw, fln), legendtext = plot.legend)
ppcomp(list(fg, fe, fw, fln), legendtext = plot.legend)
gofstat(list(fg, fe,fw, fln),fitnames = c("gamma", "exp", "Wei", "logn"))
#Calcul de la durée de service des appels. Pour cela on doit extraire l'heure de début de service
# dans la colonne 'answered' et l'heure de fin de service dans la collone 'hangup'.
# Les heures doit être converti en seconde et puis on calcule la durée de servie,
# serviceTime=heure(hangup)-heure(answered).
# Nous allons ensuite insérer la nouvelle colonne dans notre dataframe df1
timeAnsw=as.character(df1$answered)
timeAns = t(as.data.frame(strsplit(timeAnsw,' ' )))
timeAn=t(as.data.frame(strsplit(timeAns[,2], ':')))   # exple 19:15:23
row.names(timeAn)=NULL
timeAn=as.data.frame(timeAn)
names(timeAn)<-c('HH','MM','SS')
print(head(timeAn))
hsAns=as.numeric(timeAn$HH)*3600+as.numeric(timeAn$MM)*60+as.numeric(timeAn$SS)
timeHang=as.character(df1$hangup)
timeHan = t(as.data.frame(strsplit(timeHang,' ' )))
timeHa=t(as.data.frame(strsplit(timeHan[,2], ':')))   # exple 19:15:23
row.names(timeHa)=NULL
timeHa=as.data.frame(timeHa)
names(timeHa)<-c('HH','MM','SS')
print(head(timeHa))
hsHan=as.numeric(timeHa$HH)*3600+as.numeric(timeHa$MM)*60+as.numeric(timeHa$SS)
serviceTime=hsHan-hsAns
df1=cbind(df1,serviceTime)
min(df1$serviceTime)
max(df1$serviceTime)
#Nous allons supprimer les lines avec des données erronés
df2=df1[which(df1$answered !='NULL' ), ]
#####
# Nous voulons savoir la distribution des durées de service pour le type d'appel
# 30175. Voici les données allons récuperer les données des durées de service
dfService1<-df2[which(df2$queue_name=='30175'), ]
dureeService1=dfService1$serviceTime
d1=density(dureeService1)
plot(d1)
fln <- fitdist(dureeService1, "lnorm")
fe <- fitdist(dureeService1, "exp")
par(mfrow = c(2, 2))
plot.legend <- c("expo", "logno")
denscomp(list(fe, fln), legendtext = plot.legend)
qqcomp(list(fe, fln), legendtext = plot.legend)
cdfcomp(list(fe, fln), legendtext = plot.legend)
ppcomp(list(fe, fln), legendtext = plot.legend)
dureeService1=dureeService1[dureeService1>0]
fln <- fitdist(dureeService1, "lnorm")
fe <- fitdist(dureeService1, "exp")
par(mfrow = c(2, 2))
plot.legend <- c("expo", "logno")
denscomp(list(fe, fln), legendtext = plot.legend)
qqcomp(list(fe, fln), legendtext = plot.legend)
cdfcomp(list(fe, fln), legendtext = plot.legend)
ppcomp(list(fe, fln), legendtext = plot.legend)
tt=expand.grid(height = seq(60, 80, 5), weight = seq(100, 300, 50), sex = c("Male","Female"))
tt
45%%(30/60)
30/60
45%%0.5
45%%(30/60)*30/60
59%%(30/60)*30/60
45%%(900/60)*900/60
(45%%(900/60))*(900/60)
900/60
45%%15
46%%15
(46%%(900/60))*(900/60)
(45%%(900/60))*(900/60)
(46%%(900/60))*(900/60)
(46%%(900/60))*900/60
(44%%(900/60))*900/60
(44%%(900/60))*900/60
(45%%(900/60))*900/60
(46%%(900/60))*900/60
(36%%(900/60))*900/60
(as.numeric(36)%%(900/60))*900/60
900/60
36/15
36%15
36%%15
5%%2
as.numeric(format(36))%%15
(as.numeric(36)%/%(900/60))*900/60
as.numeric(format(36))%/%15
path="/Users/mamadouthiongane/Desktop/Cours-Simulation/Master2SIR-2020-2021/data//#### load activity data
setwd(path)#place le curseur de lecture de fichiers au chemin précédent
load_activity_data = function() {
act.data = read.csv("activity-2014-01.csv")
act.data = rbind(act.data, read.csv("activity-2014-02.csv"))
act.data = rbind(act.data, read.csv("activity-2014-03.csv"))
act.data = rbind(act.data, read.csv("activity-2014-04.csv"))
act.data = rbind(act.data, read.csv("activity-2014-05.csv"))
act.data = rbind(act.data, read.csv("activity-2014-06.csv"))
act.data = rbind(act.data, read.csv("activity-2014-07.csv"))
act.data = rbind(act.data, read.csv("activity-2014-08.csv"))
act.data = rbind(act.data, read.csv("activity-2014-09.csv"))
act.data = rbind(act.data, read.csv("activity-2014-10.csv"))
act.data = rbind(act.data, read.csv("activity-2014-11.csv"))
act.data = rbind(act.data, read.csv("activity-2014-12.csv"))
act.data$startdatetime = as.POSIXct(as.character(act.data$startdatetime))
outlier.row = which(act.data$enddatetime == "0000-00-00 00:00:00")
act.data = act.data[-outlier.row,]
act.data$enddatetime = as.POSIXct(as.character(act.data$enddatetime))
return(act.data)
}
#### load call records/log data
load_call_data = function() {
call.data = read.csv("calls-2014-01.csv")
call.data = rbind(call.data, read.csv("calls-2014-02.csv"))
call.data = rbind(call.data, read.csv("calls-2014-03.csv"))
call.data = rbind(call.data, read.csv("calls-2014-04.csv"))
call.data = rbind(call.data, read.csv("calls-2014-05.csv"))
call.data = rbind(call.data, read.csv("calls-2014-06.csv"))
call.data = rbind(call.data, read.csv("calls-2014-07.csv"))
call.data = rbind(call.data, read.csv("calls-2014-08.csv"))
call.data = rbind(call.data, read.csv("calls-2014-09.csv"))
call.data = rbind(call.data, read.csv("calls-2014-10.csv"))
call.data = rbind(call.data, read.csv("calls-2014-11.csv"))
call.data = rbind(call.data, read.csv("calls-2014-12.csv"))
null.row = which(as.character(call.data$answered) == "NULL")
call.data$answered[null.row] = NA
null.row = which(as.character(call.data$consult) == "NULL")
call.data$consult[null.row] = NA
null.row = which(as.character(call.data$transfer) == "NULL")
call.data$transfer[null.row] = NA
### in row 158751, hangup is NULL which is not correct
null.row = which(as.character(call.data$hangup) == "NULL")
call.data$hangup[null.row] = NA
call.data$date_received = as.POSIXct(call.data$date_received)
call.data$answered = as.POSIXct(as.character(call.data$answered))
call.data$consult = as.POSIXct(as.character(call.data$consult))
call.data$transfer = as.POSIXct(as.character(call.data$transfer))
call.data$hangup = as.POSIXct(as.character(call.data$hangup))
return(call.data)
}
callData=load_call_data()
path="/Users/mamadouthiongane/Desktop/Cours-Simulation/Master2SIR-2020-2021/data//"#### load activity data
setwd(path)#place le curseur de lecture de fichiers au chemin précédent
load_activity_data = function() {
act.data = read.table("activity-2014-01.csv", sep=",", dec=".", header=TRUE)
act.data = rbind(act.data, read.csv("activity-2014-02.csv"))
act.data = rbind(act.data, read.csv("activity-2014-03.csv"))
act.data = rbind(act.data, read.csv("activity-2014-04.csv"))
act.data = rbind(act.data, read.csv("activity-2014-05.csv"))
act.data = rbind(act.data, read.csv("activity-2014-06.csv"))
act.data = rbind(act.data, read.csv("activity-2014-07.csv"))
act.data = rbind(act.data, read.csv("activity-2014-08.csv"))
act.data = rbind(act.data, read.csv("activity-2014-09.csv"))
act.data = rbind(act.data, read.csv("activity-2014-10.csv"))
act.data = rbind(act.data, read.csv("activity-2014-11.csv"))
act.data = rbind(act.data, read.csv("activity-2014-12.csv"))
act.data$startdatetime = as.POSIXct(as.character(act.data$startdatetime))
outlier.row = which(act.data$enddatetime == "0000-00-00 00:00:00")
act.data = act.data[-outlier.row,]
act.data$enddatetime = as.POSIXct(as.character(act.data$enddatetime))
return(act.data)
}
#### load call records/log data
load_call_data = function() {
call.data = read.csv("calls-2014-01.csv")
call.data = rbind(call.data, read.csv("calls-2014-02.csv"))
call.data = rbind(call.data, read.csv("calls-2014-03.csv"))
call.data = rbind(call.data, read.csv("calls-2014-04.csv"))
call.data = rbind(call.data, read.csv("calls-2014-05.csv"))
call.data = rbind(call.data, read.csv("calls-2014-06.csv"))
call.data = rbind(call.data, read.csv("calls-2014-07.csv"))
call.data = rbind(call.data, read.csv("calls-2014-08.csv"))
call.data = rbind(call.data, read.csv("calls-2014-09.csv"))
call.data = rbind(call.data, read.csv("calls-2014-10.csv"))
call.data = rbind(call.data, read.csv("calls-2014-11.csv"))
call.data = rbind(call.data, read.csv("calls-2014-12.csv"))
null.row = which(as.character(call.data$answered) == "NULL")
call.data$answered[null.row] = NA
null.row = which(as.character(call.data$consult) == "NULL")
call.data$consult[null.row] = NA
null.row = which(as.character(call.data$transfer) == "NULL")
call.data$transfer[null.row] = NA
### in row 158751, hangup is NULL which is not correct
null.row = which(as.character(call.data$hangup) == "NULL")
call.data$hangup[null.row] = NA
call.data$date_received = as.POSIXct(call.data$date_received)
call.data$answered = as.POSIXct(as.character(call.data$answered))
call.data$consult = as.POSIXct(as.character(call.data$consult))
call.data$transfer = as.POSIXct(as.character(call.data$transfer))
call.data$hangup = as.POSIXct(as.character(call.data$hangup))
return(call.data)
}
callData=load_call_data()
path="/Users/mamadouthiongane/Desktop/Cours-Simulation/Master2SIR-2020-2021/data//"#### load activity data
setwd(path)#place le curseur de lecture de fichiers au chemin précédent
load_activity_data = function() {
act.data = read.csv("activity-2014-01.csv")
act.data = rbind(act.data, read.csv("activity-2014-02.csv"))
act.data = rbind(act.data, read.csv("activity-2014-03.csv"))
act.data = rbind(act.data, read.csv("activity-2014-04.csv"))
act.data = rbind(act.data, read.csv("activity-2014-05.csv"))
act.data = rbind(act.data, read.csv("activity-2014-06.csv"))
act.data = rbind(act.data, read.csv("activity-2014-07.csv"))
act.data = rbind(act.data, read.csv("activity-2014-08.csv"))
act.data = rbind(act.data, read.csv("activity-2014-09.csv"))
act.data = rbind(act.data, read.csv("activity-2014-10.csv"))
act.data = rbind(act.data, read.csv("activity-2014-11.csv"))
act.data = rbind(act.data, read.csv("activity-2014-12.csv"))
act.data$startdatetime = as.POSIXct(as.character(act.data$startdatetime))
outlier.row = which(act.data$enddatetime == "0000-00-00 00:00:00")
act.data = act.data[-outlier.row,]
act.data$enddatetime = as.POSIXct(as.character(act.data$enddatetime))
return(act.data)
}
#### load call records/log data
load_call_data = function() {
call.data = read.csv("calls-2014-01.csv")
call.data = rbind(call.data, read.csv("calls-2014-02.csv"))
call.data = rbind(call.data, read.csv("calls-2014-03.csv"))
call.data = rbind(call.data, read.csv("calls-2014-04.csv"))
call.data = rbind(call.data, read.csv("calls-2014-05.csv"))
call.data = rbind(call.data, read.csv("calls-2014-06.csv"))
call.data = rbind(call.data, read.csv("calls-2014-07.csv"))
call.data = rbind(call.data, read.csv("calls-2014-08.csv"))
call.data = rbind(call.data, read.csv("calls-2014-09.csv"))
call.data = rbind(call.data, read.csv("calls-2014-10.csv"))
call.data = rbind(call.data, read.csv("calls-2014-11.csv"))
call.data = rbind(call.data, read.csv("calls-2014-12.csv"))
null.row = which(as.character(call.data$answered) == "NULL")
call.data$answered[null.row] = NA
null.row = which(as.character(call.data$consult) == "NULL")
call.data$consult[null.row] = NA
null.row = which(as.character(call.data$transfer) == "NULL")
call.data$transfer[null.row] = NA
### in row 158751, hangup is NULL which is not correct
null.row = which(as.character(call.data$hangup) == "NULL")
call.data$hangup[null.row] = NA
call.data$date_received = as.POSIXct(call.data$date_received)
call.data$answered = as.POSIXct(as.character(call.data$answered))
call.data$consult = as.POSIXct(as.character(call.data$consult))
call.data$transfer = as.POSIXct(as.character(call.data$transfer))
call.data$hangup = as.POSIXct(as.character(call.data$hangup))
return(call.data)
}
callData=load_call_data()
print(head(callData))
print(callData)
